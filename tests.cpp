#include "doctest.h"
#include <vector>
#include "hexfile.h"
#include <algorithm> //std::remove



#define FLASH_HEX_FILE "/home/yoctouser/mcbootflash-c/mcbootflash/tests/testcases/flash/test.hex"
#define FLASH_HEX_FILE_VITIAPP "/home/yoctouser/mcbootflash-c/mcbootflash/tests/testcases/flash/VitiAppDelivery.X.production.hex"

BootAttrs defaultBootAttrsForTest()
{
    BootAttrs bootattrs;
    bootattrs.version = 258,
    bootattrs.max_packet_length = 256,
    bootattrs.device_id = 13398,
    bootattrs.erase_size = 2048,
    bootattrs.write_size = 8,
    bootattrs.memory_start = 6144;
    bootattrs.memory_end = 174080;
    bootattrs.has_checksum = true;
    return bootattrs;
}

std::vector<Segment> debugSegmentsFromPython()
{
    return std::vector<Segment>{
        Segment(0, 16, hexStringToBytes("e01a040000000000041a0000081a0000"), 1),
        Segment(16, 32, hexStringToBytes("0c1a0000101a0000141a0000181a0000"), 1),
        Segment(32, 48, hexStringToBytes("1c1a0000001a0000201a0000241a0000"), 1),
        Segment(48, 64, hexStringToBytes("281a00002c1a0000301a0000341a0000"), 1),
        Segment(64, 80, hexStringToBytes("381a00003c1a0000401a0000441a0000"), 1),
        Segment(80, 96, hexStringToBytes("481a00004c1a0000501a0000541a0000"), 1),
        Segment(96, 112, hexStringToBytes("581a0000001a00005c1a0000601a0000"), 1),
        Segment(112, 128, hexStringToBytes("641a0000681a00006c1a0000001a0000"), 1),
        Segment(128, 144, hexStringToBytes("001a0000001a0000701a0000741a0000"), 1),
        Segment(144, 160, hexStringToBytes("781a00007c1a0000801a0000841a0000"), 1),
        Segment(160, 176, hexStringToBytes("881a00008c1a0000901a0000941a0000"), 1),
        Segment(176, 192, hexStringToBytes("001a0000001a0000981a00009c1a0000"), 1),
        Segment(192, 208, hexStringToBytes("a01a0000001a0000001a0000001a0000"), 1),
        Segment(208, 224, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(224, 240, hexStringToBytes("001a0000001a0000001a0000a41a0000"), 1),
        Segment(240, 256, hexStringToBytes("a81a0000001a0000001a0000001a0000"), 1),
        Segment(256, 272, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(272, 288, hexStringToBytes("ac1a0000001a0000001a0000001a0000"), 1),
        Segment(288, 304, hexStringToBytes("001a0000001a0000001a0000b01a0000"), 1),
        Segment(304, 320, hexStringToBytes("b41a0000b81a0000001a0000001a0000"), 1),
        Segment(320, 336, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(336, 352, hexStringToBytes("001a0000001a0000001a0000bc1a0000"), 1),
        Segment(352, 368, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(368, 384, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(384, 400, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(400, 416, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(416, 432, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(432, 448, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(448, 464, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(464, 480, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(480, 496, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(496, 512, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(512, 528, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(528, 544, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(544, 560, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(560, 576, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(576, 592, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(592, 608, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(608, 624, hexStringToBytes("c01a0000c41a0000001a0000c81a0000"), 1),
        Segment(624, 640, hexStringToBytes("cc1a0000d01a0000d41a0000d81a0000"), 1),
        Segment(640, 656, hexStringToBytes("dc1a0000001a0000001a0000001a0000"), 1),
        Segment(656, 672, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(672, 688, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(688, 704, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(704, 720, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(720, 736, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(736, 752, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(752, 768, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(768, 784, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(784, 800, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(800, 816, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(816, 832, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(832, 848, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(848, 864, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(864, 880, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(880, 896, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(896, 912, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(912, 928, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(928, 944, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(944, 960, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(960, 976, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(976, 992, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(992, 1008, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(1008, 1024, hexStringToBytes("001a0000001a0000001a0000001a0000"), 1),
        Segment(12288, 12304, hexStringToBytes("e01a0400000000000200fa00000f7800"), 1),
        Segment(12304, 12320, hexStringToBytes("1e00780000407800674060000080fb00"), 1),
        Segment(12320, 12336, hexStringToBytes("670060004a00dd00020a8000f13f2e00"), 1),
        Segment(12336, 12352, hexStringToBytes("8100610001007000000a88000080fa00"), 1),
        Segment(12352, 12368, hexStringToBytes("000006000200fa00000f78001e007800"), 1),
        Segment(12368, 12384, hexStringToBytes("00407800674060000080fb0067006000"), 1),
        Segment(12384, 12400, hexStringToBytes("020a800081ff2f008100610001007000"), 1),
        Segment(12400, 12416, hexStringToBytes("000a88000080fa00000006000000fa00"), 1),
        Segment(12416, 12432, hexStringToBytes("4301a8000080fa00000006000000fa00"), 1),
        Segment(12432, 12448, hexStringToBytes("0028a9000080fa00000006000200fa00"), 1),
        Segment(12448, 12464, hexStringToBytes("000f78001e0078000040780067406000"), 1),
        Segment(12464, 12480, hexStringToBytes("0080fb00670060004a00dd00420a8000"), 1),
        Segment(12480, 12496, hexStringToBytes("f13f2e008100610001007000400a8800"), 1),
        Segment(12496, 12512, hexStringToBytes("0080fa00000006000200fa00000f7800"), 1),
        Segment(12512, 12528, hexStringToBytes("1e00780000407800674060000080fb00"), 1),
        Segment(12528, 12544, hexStringToBytes("67006000420a800081ff2f0081006100"), 1),
        Segment(12544, 12560, hexStringToBytes("01007000400a88000080fa0000000600"), 1),
        Segment(12560, 12576, hexStringToBytes("0000fa004b01a8000080fa0000000600"), 1),
        Segment(12576, 12592, hexStringToBytes("0200fa00000f78001e00780000407800"), 1),
        Segment(12592, 12608, hexStringToBytes("674060000080fb00670060004a00dd00"), 1),
        Segment(12608, 12624, hexStringToBytes("820a8000f13f2e008100610001007000"), 1),
        Segment(12624, 12640, hexStringToBytes("800a88000080fa00000006000200fa00"), 1),
        Segment(12640, 12656, hexStringToBytes("000f78001e0078000040780067406000"), 1),
        Segment(12656, 12672, hexStringToBytes("0080fb0067006000820a800081ff2f00"), 1),
        Segment(12672, 12688, hexStringToBytes("8100610001007000800a88000080fa00"), 1),
        Segment(12688, 12704, hexStringToBytes("000006000000fa005301a8000080fa00"), 1),
        Segment(12704, 12720, hexStringToBytes("000006000000fa0004a8a9000080fa00"), 1),
        Segment(12720, 12736, hexStringToBytes("000006000200fa00000f78001e007800"), 1),
        Segment(12736, 12752, hexStringToBytes("00407800674060000080fb0067006000"), 1),
        Segment(12752, 12768, hexStringToBytes("4a00dd00c20a8000f13f2e0081006100"), 1),
        Segment(12768, 12784, hexStringToBytes("01007000c00a88000080fa0000000600"), 1),
        Segment(12784, 12800, hexStringToBytes("0200fa00000f78001e00780000407800"), 1),
        Segment(12800, 12816, hexStringToBytes("674060000080fb0067006000c20a8000"), 1),
        Segment(12816, 12832, hexStringToBytes("81ff2f008100610001007000c00a8800"), 1),
        Segment(12832, 12848, hexStringToBytes("0080fa00000006000000fa005b01a800"), 1),
        Segment(12848, 12864, hexStringToBytes("0080fa00000006000600fa00004f7800"), 1),
        Segment(12864, 12880, hexStringToBytes("1147980012079800230798001e80fb00"), 1),
        Segment(12880, 12896, hexStringToBytes("a1b9260000804000104078000074a100"), 1),
        Segment(12896, 12912, hexStringToBytes("8080fb00f00720000080600072358000"), 1),
        Segment(12912, 12928, hexStringToBytes("01f82f00810061000100700070358800"), 1),
        Segment(12928, 12944, hexStringToBytes("1e4090000080fb00a1b9260000804000"), 1),
        Segment(12944, 12960, hexStringToBytes("104078000074a1008080fb00f0072000"), 1),
        Segment(12960, 12976, hexStringToBytes("008060008235800001f82f0081006100"), 1),
        Segment(12976, 12992, hexStringToBytes("01007000803588003048070093480700"), 1),
        Segment(12992, 13008, hexStringToBytes("f648070060470700700020004eff0700"), 1),
        Segment(13008, 13024, hexStringToBytes("7000200071ff07007000200090ff0700"), 1),
        Segment(13024, 13040, hexStringToBytes("70002000b3ff070064ff070088ff0700"), 1),
        Segment(13040, 13056, hexStringToBytes("a8ff0700ccff070064ff0700a9ff0700"), 1),
        Segment(13056, 13072, hexStringToBytes("1e0090004fff07001e00900072ff0700"), 1),
        Segment(13072, 13088, hexStringToBytes("2e00900091ff07002e009000b4ff0700"), 1),
        Segment(13088, 13104, hexStringToBytes("50480700b34807001649070080470700"), 1),
        Segment(13104, 13120, hexStringToBytes("0080fa00000006000200fa00fb420700"), 1),
        Segment(13120, 13136, hexStringToBytes("004f7800054d07001021a8001e407800"), 1),
        Segment(13136, 13152, hexStringToBytes("e44f500002003a00b24b070016410700"), 1),
        Segment(13152, 13168, hexStringToBytes("1e80fb00a1b926000080400010407800"), 1),
        Segment(13168, 13184, hexStringToBytes("0074a1008080fb00f007200000806000"), 1),
        Segment(13184, 13200, hexStringToBytes("3235800001f82f008100610001007000"), 1),
        Segment(13200, 13216, hexStringToBytes("303588000b4d070010c0b3000080fa00"), 1),
        Segment(13216, 13232, hexStringToBytes("000006000000fa00024d070006430700"), 1),
        Segment(13232, 13248, hexStringToBytes("10c0b3000080fa0000000600f03fb100"), 1),
        Segment(13248, 13264, hexStringToBytes("0180b10006003500ee03090000000000"), 1),
        Segment(13264, 13280, hexStringToBytes("403fb1000180b100fbff3d001000b000"), 1),
        Segment(13280, 13296, hexStringToBytes("203fb000020035000080090000000000"), 1),
        Segment(13296, 13304, hexStringToBytes("00000600ffff3700"), 1)};
}

std::vector<Segment> chunkSegmentsVitiAppFromPython()
{
    return std::vector<Segment>{
        Segment(16384, 16624, hexStringToBytes("16200400000000000000000002000000000000000200000002000000040000000000000000000000000000004f8220000e7f22000e01880000000000000020000000e00002003200000120002002880014000700e40007000000e00003003a00403f220001002000020037000000200001002000810f70000100320014000700000020000000e000020032000000020000000000f6210200000000000040da000000fe004440a900200020000000e0000300320010002000900188004440a800000006008a1f78008b1f780000000600a1028800800478000000eb001f003700e284440054a0b4009905ba00e2844400"), 2),
        Segment(16624, 16864, hexStringToBytes("54a0b4009906ba00e284440054a0b4000006eb00476fde00fd07b200ae018800636ce10003003a00eaff07000000eb000e003700606ce10008003a00004deb000a05e800020039003420ec000af0a0008b05e900f9ff3e00040037006168e100010032000086eb000b00070019c7ba001905ba000e04e00003003a000a00e000dbff3a0000000600fe07b200ae0288008a047800f5ff37000cd0a300e20f4d001c00390089027800354dba000a05e800020039003420ec000af0a0008b05e9000f003200254dba000a05e800020039003420ec000af0a0008b05e900080032000c00e0000600320015cdba000a05e800"), 2),
        Segment(16864, 17104, hexStringToBytes("020039003420ec000af0a0008b05e9008984e80054a0b4000b00e000e2ff3a00000006009902ba00055d78008b05e900f7ff3200c82ade00055d78008b05e900f3ff32000c00e000f1ff320019ddba00eeff37003600f800809fbe00829fbe00849fbe00869fbe000000fa008020a9000000eb00580107000080fa004f03be004f02be004f01be004f00be003600f900004006003600f800809fbe00829fbe00849fbe00869fbe000000fa004f0107008040a90010002000470107000080fa004f03be004f02be004f01be004f00be003600f900004006003600f800809fbe00829fbe00849fbe00869fbe000000fa00"), 2),
        Segment(17104, 17344, hexStringToBytes("8060a90020002000370107000080fa004f03be004f02be004f01be004f00be003600f900004006003600f800809fbe00829fbe00849fbe00869fbe000000fa008080a90030002000270107000080fa004f03be004f02be004f01be004f00be003600f900004006003600f800809fbe00829fbe00849fbe00869fbe000000fa008600a90070002000170107000080fa004f03be004f02be004f01be004f00be003600f900004006003600f800809fbe00829fbe00849fbe00869fbe000000fa0085e0a90080002000070107000080fa004f03be004f02be004f01be004f00be003600f90000400600801f78000000fa00"), 2),
        Segment(17344, 17584, hexStringToBytes("50048000680060000000e000010032008a60a9000080fa004f007800004006000040da000000fe00000005000000fa00100107009d000700feff3700ffff3700f0210400000000000000fa0080002000c01c88009a23ef0070062000001d880099e3a8009b43a8000080fa00000006000000fa0000000000d01c8000610060000000e000fcff3200d01c8000620060000000e000010032009a23a900f01c8000004078000080fa00000006000200fa00004f780000000000d11c800000202000008060000000e000fbff3a001e80fb00e01c88000080fa00000006000000fa00d01c800000407800614060000080fb00"), 2),
        Segment(17584, 17824, hexStringToBytes("00f0a7000000ea000000ea004f00de00004078000080fa00000006000000fa00d11c800000202000008060000000e00007003a00d11c800000402000008060000000e0000200320010002000010037000000eb00004078000080fa00000006000000fa00d01c80004800de00614060000080fb0000f0a7000000ea000000ea004f00de00004078000080fa00000006000000fa00d01c80000080fa00000006000000fa0099e3a8009b43a8000080fa00000006000000fa0099e3a9009b43a9000080fa00000006000000fa006626ef0000402200d033880070f9270010338800f0bd2f00b03388007426ef008826ef00"), 2),
        Segment(17824, 18064, hexStringToBytes("7226ef008626ef007426ef008826ef0000002100903388008626ef006826ef007c26ef007000200050338800c0212f00f033880001088000f00b200000816000600420007105200003102000804978008149780082497800a13d800000fc2f00008060000030a000a03d8800f13e800000f82f00008060003000b300f03e880000088000000178000260a0006004200071052000031020008049780081497800824978000080fa00000006000000fa007aa6a8000080fa00000006000000fa007aa6a9000080fa00000006000000fa0000202100a10720004100070002c8bf000004e0001b003200f0ff070080062000"), 2),
        Segment(18064, 18304, hexStringToBytes("76ff07005006200074ff0700c006200072ff0700c006200070ff0700f00620006eff0700000220006cff0700300620006aff07001006200068ff07002007200066ff0700c006200064ff0700a000200062ff0700d000200060ff07000268ef0003003700d9ff070010c0b30002e8b7000080fa00000006000000fa0000002300100888000621ef006821ef006a21ef000c21ef000e21ef007821ef007c21ef007e21ef008021ef008421ef008621ef000001eb0080072000a1092000131020008049780081497800824978000001eb006004200071052000031020008049780081497800824978000080fa0000000600"), 2),
        Segment(18304, 18544, hexStringToBytes("f03fb1000180b10006003500ee03090000000000403fb1000180b100fbff3d001000b000203fb000020035000080090000000000000006000200fa00000f78009e00780001408800ffff37000000fa004080200080077800c0812000000188000080fa0000000600040800002000000080000000000800000200000082000000ffff0000020800000200000080000000000000000000fa0081058000f0ff28000080600000c0a000800588000080fa00000006000000fa004fff0700f5ff0700b1ff0700f0fe07000080fa0000000600"), 2),
        Segment(89600, 89840, hexStringToBytes("ffffff0000000000"), 2),
        Segment(89632, 89872, hexStringToBytes("ffffff0000000000"), 2),
        Segment(89648, 89888, hexStringToBytes("78ffff0000000000"), 2),
        Segment(89656, 89896, hexStringToBytes("b7ffff0000000000"), 2),
        Segment(89664, 89904, hexStringToBytes("9fffff0000000000"), 2),
        Segment(89672, 89912, hexStringToBytes("ffffff0000000000"), 2),
        Segment(89680, 89920, hexStringToBytes("dfffff0000000000"), 2),
        Segment(89688, 89928, hexStringToBytes("0000ff0000000000"), 2),
        Segment(89696, 89936, hexStringToBytes("0000ff0000000000"), 2),
        Segment(89704, 89944, hexStringToBytes("0000ff0000000000"), 2),
        Segment(89712, 89952, hexStringToBytes("0000ff0000000000"), 2),
        Segment(89720, 89960, hexStringToBytes("ffffff0000000000"), 2),
        Segment(89728, 89968, hexStringToBytes("ffffff0000000000"), 2)};
}

// only the second one survive
std::vector<Segment> debugSegmentsBeforeCropFromPython()
{
    return std::vector<Segment>{
        Segment(0, 1024, hexStringToBytes("e01a040000000000041a0000081a00000c1a0000101a0000141a0000181a00001c1a0000001a0000201a0000241a0000281a00002c1a0000301a0000341a0000381a00003c1a0000401a0000441a0000481a00004c1a0000501a0000541a0000581a0000001a00005c1a0000601a0000641a0000681a00006c1a0000001a0000001a0000001a0000701a0000741a0000781a00007c1a0000801a0000841a0000881a00008c1a0000901a0000941a0000001a0000001a0000981a00009c1a0000a01a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000a41a0000a81a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000ac1a0000001a0000001a0000001a0000001a0000001a0000001a0000b01a0000b41a0000b81a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000bc1a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000c01a0000c41a0000001a0000c81a0000cc1a0000d01a0000d41a0000d81a0000dc1a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000001a0000"), 2),
        Segment(12288, 13304, hexStringToBytes("e01a0400000000000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00020a8000f13f2e008100610001007000000a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000020a800081ff2f008100610001007000000a88000080fa00000006000000fa004301a8000080fa00000006000000fa000028a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00420a8000f13f2e008100610001007000400a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000420a800081ff2f008100610001007000400a88000080fa00000006000000fa004b01a8000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00820a8000f13f2e008100610001007000800a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000820a800081ff2f008100610001007000800a88000080fa00000006000000fa005301a8000080fa00000006000000fa0004a8a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00c20a8000f13f2e008100610001007000c00a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000c20a800081ff2f008100610001007000c00a88000080fa00000006000000fa005b01a8000080fa00000006000600fa00004f78001147980012079800230798001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060007235800001f82f008100610001007000703588001e4090000080fb00a1b9260000804000104078000074a1008080fb00f0072000008060008235800001f82f008100610001007000803588003048070093480700f648070060470700700020004eff07007000200071ff07007000200090ff070070002000b3ff070064ff070088ff0700a8ff0700ccff070064ff0700a9ff07001e0090004fff07001e00900072ff07002e00900091ff07002e009000b4ff070050480700b348070016490700804707000080fa00000006000200fa00fb420700004f7800054d07001021a8001e407800e44f500002003a00b24b0700164107001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060003235800001f82f008100610001007000303588000b4d070010c0b3000080fa00000006000000fa00024d07000643070010c0b3000080fa0000000600f03fb1000180b10006003500ee03090000000000403fb1000180b100fbff3d001000b000203fb00002003500008009000000000000000600ffff3700"), 2),
    };
}

TEST_CASE("chunked function debug_segments generation")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();

    HexFile hex;
    hex.chunked(FLASH_HEX_FILE, bootattrs);

    CHECK(hex.debug_segments.size() == 128);

    std::vector<Segment> debugSegments = debugSegmentsFromPython();

    for (unsigned int i = 0; i < debugSegments.size(); i++)
    {
        CHECK(hex.debug_segments[i] == debugSegments[i]);
    }
}


TEST_CASE("crc_ihex check 1")
{
    HexFile hex;
    // in python : "010203aaff"
    std::vector<uint8_t> bytes{0x01, 0x02, 0x03, 0xAA, 0xFF};

    unsigned int crc = hex.crc_ihex(bytes);
    CHECK(crc == 81);
}
TEST_CASE("crc_ihex check 2")
{
    HexFile hex;
    std::vector<uint8_t> bytes{67, 56, 89, 45};
    unsigned int crc = hex.crc_ihex(bytes);
    CHECK(crc == 255);
}
TEST_CASE("crc_ihex check 3")
{
    HexFile hex;
    // "588405bc7be1f154bbab51427e254050425dcf55"
    std::vector<uint8_t> bytes{0x58, 0x84, 0x05, 0xbc, 0x7b, 0xe1, 0xf1, 0x54, 0xbb, 0xab, 0x51, 0x42, 0x7e, 0x25, 0x40, 0x50, 0x42, 0x5d, 0xcf, 0x55};
    unsigned int crc = hex.crc_ihex(bytes);
    CHECK(crc == 211);
}
TEST_CASE("crc_ihex check 4")
{
    std::string hexAsStr("10000000E01A040000000000041A0000081A0000");
    std::vector<uint8_t> bytes = hexStringToBytes(hexAsStr);
    HexFile hex;
    unsigned int crc = hex.crc_ihex(bytes);
    CHECK(crc == 178);
}

TEST_CASE("chunked function all segments for vitiapp")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();
    HexFile hex;

    std::vector<Segment> chunks = hex.chunked(FLASH_HEX_FILE_VITIAPP, bootattrs);

    std::vector<Segment> fromPython = chunkSegmentsVitiAppFromPython();

    CHECK(chunks.size() == fromPython.size());
    unsigned int i = 0;
    for (i = 0; i < chunks.size(); i++)
    {
        CHECK(chunks[i].word_size_bytes == fromPython[i].word_size_bytes);
        // CHECK(chunks[i].minimum_address == fromPython[i].minimum_address);
        // CHECK(chunks[i].maximum_address == fromPython[i].maximum_address);
        CHECK(chunks[i].data == fromPython[i].data);
        if (chunks[i].minimum_address != fromPython[i].minimum_address || chunks[i].maximum_address != fromPython[i].maximum_address)
        {
            std::cout << "chunk number " << i << std::endl;
            std::cout << "minimum_address is  " << chunks[i].minimum_address << " but should be " << fromPython[i].minimum_address << std::endl;
            std::cout << "maximum_address is  " << chunks[i].maximum_address << " but should be " << fromPython[i].maximum_address << std::endl;
        }
    }
}



TEST_CASE("chunked function addSegments : debug_segment_before_crop")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();

    HexFile hex;
    hex.chunked(FLASH_HEX_FILE, bootattrs);

    std::vector<Segment> debugSegmentsBeforeCrop = debugSegmentsBeforeCropFromPython();

    CHECK(hex.debug_segments_before_crop.size() == debugSegmentsBeforeCrop.size());

    for (unsigned int i = 0; i < debugSegmentsBeforeCrop.size(); i++)
    {
        CHECK(hex.debug_segments_before_crop[i].minimum_address == debugSegmentsBeforeCrop[i].minimum_address);
        CHECK(hex.debug_segments_before_crop[i].maximum_address == debugSegmentsBeforeCrop[i].maximum_address);
        CHECK(hex.debug_segments_before_crop[i].data == debugSegmentsBeforeCrop[i].data);
        CHECK(hex.debug_segments_before_crop[i].word_size_bytes == debugSegmentsBeforeCrop[i].word_size_bytes);
    }
}

TEST_CASE("chunked function crop : only one segment must survive, the second one")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();

    HexFile hex;
    hex.chunked(FLASH_HEX_FILE, bootattrs);

    std::vector<Segment> debugSegmentsBeforeCropInPython = debugSegmentsBeforeCropFromPython();
    Segment cropSurvivorInPython = debugSegmentsBeforeCropInPython[1];
    CHECK(hex.segments.size() == 1);
    Segment cropSurvivorInSegments = hex.segments[0];

    CHECK(cropSurvivorInPython.minimum_address == cropSurvivorInPython.minimum_address);
    CHECK(cropSurvivorInSegments.maximum_address == cropSurvivorInPython.maximum_address);
    CHECK(cropSurvivorInSegments.data == cropSurvivorInPython.data);
    CHECK(cropSurvivorInSegments.word_size_bytes == cropSurvivorInPython.word_size_bytes);
}


std::vector<Segment> chunksSegmentsResultFromPython()
{
    return std::vector<Segment>{
        Segment(12288, 12528, hexStringToBytes("e01a0400000000000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00020a8000f13f2e008100610001007000000a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000020a800081ff2f008100610001007000000a88000080fa00000006000000fa004301a8000080fa00000006000000fa000028a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00420a8000f13f2e008100610001007000400a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb00"), 2),
        Segment(12528, 12768, hexStringToBytes("67006000420a800081ff2f008100610001007000400a88000080fa00000006000000fa004b01a8000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00820a8000f13f2e008100610001007000800a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000820a800081ff2f008100610001007000800a88000080fa00000006000000fa005301a8000080fa00000006000000fa0004a8a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00c20a8000f13f2e0081006100"), 2),
        Segment(12768, 13008, hexStringToBytes("01007000c00a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000c20a800081ff2f008100610001007000c00a88000080fa00000006000000fa005b01a8000080fa00000006000600fa00004f78001147980012079800230798001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060007235800001f82f008100610001007000703588001e4090000080fb00a1b9260000804000104078000074a1008080fb00f0072000008060008235800001f82f008100610001007000803588003048070093480700f648070060470700700020004eff0700"), 2),
        Segment(13008, 13248, hexStringToBytes("7000200071ff07007000200090ff070070002000b3ff070064ff070088ff0700a8ff0700ccff070064ff0700a9ff07001e0090004fff07001e00900072ff07002e00900091ff07002e009000b4ff070050480700b348070016490700804707000080fa00000006000200fa00fb420700004f7800054d07001021a8001e407800e44f500002003a00b24b0700164107001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060003235800001f82f008100610001007000303588000b4d070010c0b3000080fa00000006000000fa00024d07000643070010c0b3000080fa0000000600f03fb100"), 2),
        Segment(13248, 13488, hexStringToBytes("0180b10006003500ee03090000000000403fb1000180b100fbff3d001000b000203fb00002003500008009000000000000000600ffff3700"), 2),
    };
}

TEST_CASE("chunked function all segments")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();
    HexFile hex;

    std::vector<Segment> chunks = hex.chunked(FLASH_HEX_FILE, bootattrs);

    std::vector<Segment> fromPython = chunksSegmentsResultFromPython();

    CHECK(chunks.size() == fromPython.size());
    unsigned int i = 0;
    for (i = 0; i < chunks.size(); i++)
    {
        // std::cout << "chunk number " << i << std::endl;
        CHECK(chunks[i].word_size_bytes == fromPython[i].word_size_bytes);
        CHECK(chunks[i].minimum_address == fromPython[i].minimum_address);
        CHECK(chunks[i].maximum_address == fromPython[i].maximum_address);
        CHECK(chunks[i].data == fromPython[i].data);
    }
}

TEST_CASE("chunked function last segment")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();
    HexFile hex;

    std::vector<Segment> chunks = hex.chunked(FLASH_HEX_FILE, bootattrs);

    std::vector<Segment> fromPython = chunksSegmentsResultFromPython();

    unsigned int i = chunks.size() - 1;
    CHECK(chunks[i].word_size_bytes == fromPython[i].word_size_bytes);
    CHECK(chunks[i].minimum_address == fromPython[i].minimum_address);
    CHECK(chunks[i].maximum_address == fromPython[i].maximum_address);
    CHECK(chunks[i].data == fromPython[i].data);
}

TEST_CASE("Segment.chunked function for last segment")
{
    BootAttrs bootattrs = defaultBootAttrsForTest();
    HexFile hex;
    hex.chunked(FLASH_HEX_FILE, bootattrs);
    std::vector<Segment> segments = hex.segments;
    Segment last = hex.segments[hex.segments.size() - 1];

    // from C++, not sure about this, but first 4 segments were right, so I guess it's good enough
    unsigned int chunk_size = 120;
    unsigned int align = 4;

    std::vector<uint8_t> twoBytes{0, 0};

    std::vector<Segment> lastSegmentChunks = last.chunks(chunk_size, align, twoBytes);
    std::vector<Segment> lastSegmentChunksFromPython = std::vector<Segment>{
        Segment(12288, 12528, hexStringToBytes("e01a0400000000000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00020a8000f13f2e008100610001007000000a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000020a800081ff2f008100610001007000000a88000080fa00000006000000fa004301a8000080fa00000006000000fa000028a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00420a8000f13f2e008100610001007000400a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb00"), 2),
        Segment(12528, 12768, hexStringToBytes("67006000420a800081ff2f008100610001007000400a88000080fa00000006000000fa004b01a8000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00820a8000f13f2e008100610001007000800a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000820a800081ff2f008100610001007000800a88000080fa00000006000000fa005301a8000080fa00000006000000fa0004a8a9000080fa00000006000200fa00000f78001e00780000407800674060000080fb00670060004a00dd00c20a8000f13f2e0081006100"), 2),
        Segment(12768, 13008, hexStringToBytes("01007000c00a88000080fa00000006000200fa00000f78001e00780000407800674060000080fb0067006000c20a800081ff2f008100610001007000c00a88000080fa00000006000000fa005b01a8000080fa00000006000600fa00004f78001147980012079800230798001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060007235800001f82f008100610001007000703588001e4090000080fb00a1b9260000804000104078000074a1008080fb00f0072000008060008235800001f82f008100610001007000803588003048070093480700f648070060470700700020004eff0700"), 2),
        Segment(13008, 13248, hexStringToBytes("7000200071ff07007000200090ff070070002000b3ff070064ff070088ff0700a8ff0700ccff070064ff0700a9ff07001e0090004fff07001e00900072ff07002e00900091ff07002e009000b4ff070050480700b348070016490700804707000080fa00000006000200fa00fb420700004f7800054d07001021a8001e407800e44f500002003a00b24b0700164107001e80fb00a1b9260000804000104078000074a1008080fb00f0072000008060003235800001f82f008100610001007000303588000b4d070010c0b3000080fa00000006000000fa00024d07000643070010c0b3000080fa0000000600f03fb100"), 2),
        Segment(13248, 13488, hexStringToBytes("0180b10006003500ee03090000000000403fb1000180b100fbff3d001000b000203fb00002003500008009000000000000000600ffff3700"), 2),
    };
    CHECK(lastSegmentChunks.size() == lastSegmentChunksFromPython.size());

    for (unsigned int i = 0; i < 5; i++)
    {
        // std::cout << "chunk number " << i << std::endl;
        CHECK(lastSegmentChunks[i].word_size_bytes == lastSegmentChunksFromPython[i].word_size_bytes);
        CHECK(lastSegmentChunks[i].minimum_address == lastSegmentChunksFromPython[i].minimum_address);
        CHECK(lastSegmentChunks[i].maximum_address == lastSegmentChunksFromPython[i].maximum_address);
        CHECK(lastSegmentChunks[i].data == lastSegmentChunksFromPython[i].data);
    }
}

TEST_CASE("unpack_ihex check if IHEX_DATA")
{
    HexFile hex;
    std::string record(":10000000E01A040000000000041A0000081A0000B2");
    unsigned int type = 54;
    unsigned int address = 0;
    unsigned int size = 0;
    std::vector<uint8_t> data;

    hex.unpack_ihex(record, type, address, size, data);

    CHECK(type == IHEX_DATA);
    CHECK(address == 0);
    CHECK(size == 16);
    CHECK(bytesToHexString(data) == "e0 1a 04 00 00 00 00 00 04 1a 00 00 08 1a 00 00");
}

TEST_CASE("unpack_ihex check if IHEX_END_OF_FILE")
{
    HexFile hex;
    std::string record(":00000001FF");
    unsigned int type = 54;
    unsigned int address = 0;
    unsigned int size = 0;
    std::vector<uint8_t> data;

    hex.unpack_ihex(record, type, address, size, data);

    CHECK(type == IHEX_END_OF_FILE);
}
